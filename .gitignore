# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
pnpm-debug.log*

# Dependency directories
node_modules/

# pnpm-specific
.pnpm-store/
.pnpm/

# Build artifacts
dist/
dist-ssr/
build/
coverage/ # For test coverage reports

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local # Any other local environment files

# IDEs and Editors
.idea/ # JetBrains IDEs (IntelliJ, WebStorm, etc.)
.vscode/ # VS Code specific settings (if you don't want to share them)
*.swp # Vim swap files
*.bak # Backup files
*.orig # Merge conflict original files

# OS-specific
.DS_Store # macOS
Thumbs.db # Windows
ehthumbs.db # Windows
.directory # Linux (KDE)

# Temporary files
*.tmp
*.temp

# Editor-specific
# If you use certain editor extensions that generate files, add them here.
# e.g., for ESLint cache
.eslintcache

# Vite specific cache/temp files
.vite/
.vite-inspect/

# Wallet/dApp specific (if generated by dev tools and not part of source)
# This is less common but good to be aware of if your dev environment creates wallet-related files
# You generally don't want to commit sensitive wallet information or test chain data
# unless it's explicitly designed for version control (e.g., a burner wallet for dev that's regenerated).
# If you're publishing Move contracts, you might have a 'move/build' or 'move/target' directory
# where compiled artifacts are stored. These should almost certainly be ignored.
move/build/
move/target/

# Package manager lock files (optional - depends on team preference)
# Generally, you *should* commit package-lock.json (npm) or yarn.lock (yarn)
# to ensure consistent installs across environments. However, if you explicitly
# manage dependencies differently or have a specific reason not to, you can ignore.
# For pnpm, pnpm-lock.yaml is important for reproducible builds.
# If you are using pnpm, pnpm-lock.yaml should generally be committed.
# package-lock.json # Uncomment to ignore npm lock file
# yarn.lock        # Uncomment to ignore yarn lock file

# Optional: If you have a separate backend or a 'server' directory that might generate its own ignores,
# you might want to consider specific ignores for that.
# For example:
# /server/node_modules/
# /server/dist/